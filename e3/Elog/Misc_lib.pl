######################################################################
#	Misc_lib.pl
#	Библиотека вспомогательных функций
#
#	27 июня 2001					ООО "ЛЭНК"
######################################################################

package Misc;

######################################################################
#	Sign
#	Определение знака числового выражения.
#	Вызов:
#		Misc->Sign (Number)
#	Параметры:
#		Number - проверяемое выражение.
#	Возвращает:
#		+1, если число положительное;
#		0, если ноль;
#		-1, если число отрицательное;
#		undef, если неопределенное значение.
######################################################################

sub Sign {
   shift;							# пропустить имя класса
   my $Number = shift;					# проверяемое число
   return undef if (!defined ($Number));		# неопределенное значение
   $Number += 0;						# привести к числовому виду
   return 0 if (!$Number);				# нулевое значение
   return $Number / abs ($Number);			# вернуть знак
}

######################################################################
#	Max
#	Поиск наибольшего числового значения.
#	Вызов:
#		Misc->Max (N1, N2, ...)
#	Параметры:
#		N1, N2, ... - массив чисел, в котором производится поиск.
#	Возвращает наибольшее обнаруженное значение. Если в массиве
#	нет определенных значений, возвращается undef.
######################################################################

sub Max {
   shift;							# пропустить имя класса
   my $Result = undef;					# значение пока не определено
   for (@_) {						# весь массив значений
	if (defined ($_)) {				# определенное значение
	   my $Temp = $_ + 0;				# привести к числовому виду
	   $Result = $Temp if (!defined ($Result));	# первое найденное значение
	   $Result  = $Temp if ($Temp > $Result);	# подменить, если большее значение
	}
   }
   return $Result;					# вернуть результат
}

######################################################################
#	Min
#	Поиск наименьшего числового значения.
#	Вызов:
#		Misc->Min (N1, N2, ...)
#	Параметры:
#		N1, N2, ... - массив чисел, в котором производится поиск.
#	Возвращает наименьшее обнаруженное значение. Если в массиве
#	нет определенных значений, возвращается undef.
######################################################################

sub Min {
   shift;							# пропустить имя класса
   my $Result = undef;					# значение пока не определено
   for (@_) {						# весь массив значений
	if (defined ($_)) {				# определенное значение
	   my $Temp = $_ + 0;				# привести к числовому виду
	   $Result = $Temp if (!defined ($Result));	# первое найденное значение
	   $Result  = $Temp if ($Temp < $Result);	# подменить, если меньшее значение
	}
   }
   return $Result;					# вернуть результат
}

######################################################################
#	Between
#	Проверка нахождения числового значения в заданном интервале.
#	Вызов:
#		Misc->Between (Number, B1, B2)
#	Параметры:
#		Number - проверяемое значение;
#		B1, B2 - граничные значения.
#	Возвращает нулевое значение, если число не попадает в заданные
#	пределы, и ненулевое в противном случае. Если хоть одно из трех
#	значений не определено, возвращается undef.
######################################################################

sub Between {
   shift;							# пропустить имя класса
   my $Number = shift;					# проверяемое число
   my $Bound1 = shift;					# первая граница
   my $Bound2 = shift;					# вторая граница
   return undef if (!defined ($Number) || !defined ($Bound1) || !defined ($Bound2));	# есть неопределенность
   $Number += 0;						# перевести в числовой вид
   ($Bound1, $Bound2) = sort {$a <=> $b} ($Bound1 + 0, $Bound2 + 0);	# правильный вид и порядок следования границ
   return (($Number >= $Bound1) && ($Number <= $Bound2)) + 0;
}

######################################################################
#	StrMax
#	Поиск наибольшего строчного значения.
#	Вызов:
#		Misc->StrMax (S1, S2, ...)
#	Параметры:
#		S1, S2, ... - массив строк, в котором производится поиск.
#	Возвращает наибольшее обнаруженное значение. Если в массиве
#	нет определенных значений, возвращается undef.
######################################################################

sub StrMax {
   shift;							# пропустить имя класса
   my $Result = undef;					# значение пока не определено
   for (@_) {						# весь массив значений
	if (defined ($_)) {				# определенное значение
	   $Result = $_ if (!defined ($Result));	# первое найденное значение
	   $Result  = $_ if ($_ gt $Result);	# подменить, если большее значение
	}
   }
   return $Result;					# вернуть результат
}

######################################################################
#	StrMin
#	Поиск наименьшего строчного значения.
#	Вызов:
#		Misc->StrMin (S1, S2, ...)
#	Параметры:
#		S1, S2, ... - массив строк, в котором производится поиск.
#	Возвращает наименьшее обнаруженное значение. Если в массиве
#	нет определенных значений, возвращается undef.
######################################################################

sub StrMin {
   shift;							# пропустить имя класса
   my $Result = undef;					# значение пока не определено
   for (@_) {						# весь массив значений
	if (defined ($_)) {				# определенное значение
	   $Result = $_ if (!defined ($Result));	# первое найденное значение
	   $Result  = $_ if ($_ lt $Result);	# подменить, если меньшее значение
	}
   }
   return $Result;					# вернуть результат
}

######################################################################
#	StrBetween
#	Проверка нахождения строчного значения в заданном интервале.
#	Вызов:
#		Misc->StrBetween (String, B1, B2)
#	Параметры:
#		String - проверяемое значение;
#		B1, B2 - граничные значения.
#	Возвращает нулевое значение, если строка не попадает в заданные
#	пределы, и ненулевое в противном случае. Если хоть одно из трех
#	значений не определено, возвращается undef.
######################################################################

sub StrBetween {
   shift;							# пропустить имя класса
   my $String = shift;					# проверяемая строка
   my $Bound1 = shift;					# первая граница
   my $Bound2 = shift;					# вторая граница
   return undef if (!defined ($String) || !defined ($Bound1) || !defined ($Bound2));	# есть неопределенность
   ($Bound1, $Bound2) = sort ($Bound1, $Bound2);	# правильный порядок следования границ
   return (($String ge $Bound1) && ($String le $Bound2)) + 0;
}

######################################################################
#	Define
#	Устранение неопределенности в массиве значений.
#	Вызов:
#		Misc->Define (V1, V2, ...)
#	Параметры:
#		V1, V2, ... - массив проверяемых значений.
#	Заменяет неопределенные значения пустой строкой. В списковом
#	контексте возвращает массив полностью, в скалярном - первый
#	элемент массива.
######################################################################

sub Define {
   shift;							# пропустить имя класса
   my @TheData = @_;					# скопировать весь массив
   for (0 .. $#TheData) { $TheData[$_] = "" if (!defined ($TheData[$_])); }	# убрать неопределенность
   $TheData[0] = "" if (!@TheData);			# если массив вообще пустой
   return (wantarray) ? (@TheData) : $TheData[0];	# вернуть результат
}

1;
